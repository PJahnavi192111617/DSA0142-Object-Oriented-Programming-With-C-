#include <iostream>

class Complex {
    private:
        double real;
        double imag;

    public:
        Complex() : real(0), imag(0) {}
        Complex(double r, double i) : real(r), imag(i) {}

        // Binary operator overloading using member function
        Complex operator+(const Complex& c) {
            Complex res;
            res.real = this->real + c.real;
            res.imag = this->imag + c.imag;
            return res;
        }

        // Binary operator overloading using friend function
        friend Complex operator-(const Complex& c1, const Complex& c2) {
            Complex res;
            res.real = c1.real - c2.real;
            res.imag = c1.imag - c2.imag;
            return res;
        }

        void display() {
            std::cout << "(" << real << ", " << imag << "i)" << std::endl;
        }
};

int main() {
    Complex c1(3, 4);
    Complex c2(2, 3);
    Complex c3 = c1 + c2;   // Operator overloading using member function
    Complex c4 = c1 - c2;   // Operator overloading using friend function

    std::cout << "c1 = ";
    c1.display();

    std::cout << "c2 = ";
    c2.display();

    std::cout << "c1 + c2 = ";
    c3.display();

    std::cout << "c1 - c2 = ";
    c4.display();

    return 0;
}
